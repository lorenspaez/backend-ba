    // This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String @unique
  hash String
  name String
  isVolunteer Boolean @default(false)

  userKey String?
  photo String?
  rut String?
  patente String?
  region String?
  comuna String?
  sector String?

  organizationName String?
  organizationId Int?
  organization Organization? @relation(fields:[organizationId], references: [id])
  
  createdAlerts Alert[] @relation("CreatedAlerts")
  attendedAlerts Alert[] @relation("AttendedAlerts")
  userPosts Post[]

  @@map("users")
}

model Alert{
  id Int @id @default(autoincrement())
  alertKey String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  specie String
  body String
  photo String?
  userPhone String?
  volunteerPhone String?
  latitude String
  longitude String
  status String @default("Abierto")

  userName String
  userId Int?
  user User? @relation("CreatedAlerts", fields:[userId], references: [id])

  alertCategoryName String
  alertCategoryColour String
  alertCategoryPhoto String
  alertCategoryId Int?
  alertCategory AlertCategory? @relation(fields:[alertCategoryId], references: [id])

  providedElementName String?
  providedElement AlertElement[]@relation("ProvidedElements")
  neededElementName String
  neededElement AlertElement[]@relation("NeededElements")

  volunteerName String?
  volunteerId Int?
  volunteer User? @relation("AttendedAlerts", fields: [volunteerId], references: [id]) 

  @@map("alerts")
}

model Organization{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String @unique
  description String
  isFoundation Boolean @default(false)
  photo String?
  email String?
  phoneNum String?
  socialMedia String?

  certificationDocument String?
  rutFoundation String?
  
  namePresidente String
  rutPresidente String?
  nameSecretario String
  rutSecretario String?
  nameTesorero String
  rutTesorero String?

  volunteers User[]
  inPosts Post[]

  @@map("organizations")
}

model Post{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String
  abstract String
  body String
  photo String
  
  userName String
  userId Int
  volunteer User @relation(fields:[userId], references: [id])

  organizationName String
  organizationId Int
  organization Organization @relation(fields:[organizationId], references: [id])

  categoryName String
  categoryId Int
  category Category @relation(fields:[categoryId], references: [id])

  @@map("posts")
}

model Category{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  photo String
  name String @unique
  
  inPosts Post[]

  @@map("categories")
}

model AlertCategory{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String @unique
  photo String
  colour String

  inAlerts Alert[]

  @@map("alertCategories")
}

model AlertElement{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String @unique

  providedElements Alert[] @relation("ProvidedElements")
  neededElements Alert[] @relation("NeededElements")

  @@map("alertElements")
}